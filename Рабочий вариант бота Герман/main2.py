from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from config import TOKEN_API

# # –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.contrib.fsm_storage.memory import MemoryStorage

#
# # –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—à–∏–Ω—É
storage = MemoryStorage()


# FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
class FSMAdmin_Clients(StatesGroup):
    Name = State()
    Phone_number = State()
    Address = State()
    Name_shop = State()
    Confirmation = State()


# FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
class FSMAdmin_Clients_change(StatesGroup):
    Id = State()
    Name = State()
    Phone_number = State()
    Address = State()
    Name_shop = State()
    Confirmation = State()


# FSM –¥–ª—è add –ó–ê–Ø–í–ö–ò
class FSMAdmin_applications_add(StatesGroup):
    Id = State()
    Confirmation = State()



# FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ó–ê–Ø–í–ö–ò
class FSMAdmin_applications_del(StatesGroup):
    Id = State()


# FSM –¥–ª—è add –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ó–ê–Ø–í–ö–ò
class FSMAdmin_constant_applications_add(StatesGroup):
    Id = State()
    Confirmation = State()


# FSM –¥–ª—è del –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ó–ê–Ø–í–ö–ò
class FSMAdmin_constant_applications_del(StatesGroup):
    Id = State()
    Confirmation = State()


# FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
class FSMAdmin_Clients_del(StatesGroup):
    Id = State()
    Confirmation = State()


# FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ö–ª–µ–±–∞
class FSMAdmin_Brod_add(StatesGroup):
    Name = State()
    Heft = State()
    Price_jr = State()
    Price_sl = State()
    Photo = State()
    Confirmation = State()


# FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ö–ª–µ–±–∞
class FSMAdmin_Brod_change(StatesGroup):
    ID = State()
    Name = State()
    Heft = State()
    Price_jr = State()
    Price_sl = State()
    Photo = State()
    Confirmation = State()


# FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ö–ª–µ–±–∞
class FSMAdmin_Brod_del(StatesGroup):
    ID = State()
    Confirmation = State()


# –º–æ—ë
import keyboard
import bd

bot = Bot(TOKEN_API)  # —Å–æ–∑–¥–∞–ª–∏ –±–æ—Ç–∞
dp = Dispatcher(bot, storage=storage)  # —Å–æ–∑–¥–∞–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –∏ fsm

# menu '–ó–∞—è–≤–∫–∏'- –ª–æ–≤–∏–º id –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –Ω—ë –≤ id_and_name_clients(–≤ –∫–æ–Ω—Ü–µ –æ—á–∏—Å—Ç–∏–º))
id_and_name_clients = []
# —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ (–≤ –∫–æ–Ω—Ü–µ –æ—á–∏—Å—Ç–∏–º))
id_and_name_clients2 = []
# —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏
id_clients_end_day_of_weec_permanent_applications = []

# –°–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
kontakts = '<b>–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>\n' \
           '<em>–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é ¬´–ö–æ–ª–æ—Å –ì–º–±–•¬ª</em>\n' \
           '<b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å:</b>\n' \
           '<em>658839, –ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π, –≥.–Ø—Ä–æ–≤–æ–µ, –∫–≤–∞—Ä—Ç–∞–ª ¬´–í¬ª, –¥–æ–º 27</em>\n' \
           '<b>–ò–ù–ù:</b>\n' \
           '<em>2211000860</em>\n' \
           '<b>–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä:</b>\n' \
           '<em>–ö–µ–Ω–∏–≥ –í–ª–∞–¥–∏–º–∏—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á</em>\n' \
           '<b>Email:</b>\n' \
           '<em>kolos.gmbh@gmail.com</em>\n' \
           '<b>–¢–µ–ª–µ—Ñ–æ–Ω (—Ñ–∞–∫—Å):</b>\n' \
           '<em>+7(913)099-54-13</em>'

# –°–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –í–∞–∫–∞–Ω—Å–∏—è–º–∏
vacancies = '<b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—Ä–µ–±—É—é—Ç—Å—è:</b>\n' \
            '- –ü–µ–∫–∞—Ä—å - <em>(–æ–±—É—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ —Å –∑/–ø)</em>\n' \
            '- –¢–µ—Å—Ç–æ–≤–æ–¥ - <em>(–æ–±—É—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ —Å –∑/–ø)</em>\n' \
            '- –ì—Ä—É–∑—á–∏–∫-–≤–æ–¥–∏—Ç–µ–ª—å - <em>(–æ–±—É—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏ —Å –∑/–ø)</em>\n' \
            '- –£–±–æ—Ä—â–∏—Ü–∞ -  <em>(–≤ –º–∞–≥–∞–∑–∏–Ω "–ê—Å—Å–æ—Ä—Ç–∏")</em>\n' \
            '<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ—Ä–Ω—É:</b>\n' \
            '<em>+7(913)099-54-13</em>'

# –°–ø–∏—Å–æ–∫ —Ö–ª–µ–±–∞
list_name_brod_osnov = ['–ë–∞—Ç–æ–Ω "–°–¥–æ–±–Ω—ã–π"___________',
                        '–ë–∞—Ç–æ–Ω "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"_______',
                        '"–ë–æ–≥–∞—Ç—ã—Ä—Å–∫–∏–π" –æ—Ç—Ä—É–±–Ω–æ–π 0,3',
                        '"–ë–æ–≥–∞—Ç—ã—Ä—Å–∫–∏–π" –æ—Ç—Ä—É–±–Ω–æ–π 0,5',
                        '–•–ª–µ–± "–î–∞—Ä–∫ 8 –∑–ª–∞–∫–æ–≤"______',
                        '–•–ª–µ–± "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 075"___',
                        '–•–ª–µ–± "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 050"___',
                        '–•–ª–µ–± "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 035"___',
                        '–•–ª–µ–± "–ö—É–ø–µ—á–µ—Å–∫–∏–π" —Å –∏–∑—é–º–æ–º',
                        '–•–ª–µ–± "–ö—É–ø–µ—á–µ—Å–∫–∏–π" —Å —Ç–º–∏–Ω–æ–º',
                        '–•–ª–µ–± "–û–≤—Å—è–Ω—ã–π"____________',
                        '–•–ª–µ–± "–°—Ç–µ–ø–Ω–æ–π"____________',
                        '–•–ª–µ–± "–¢–æ—Å—Ç–æ–≤—ã–π"___________',
                        '–•–ª–µ–± "–ß–∏–∞–±–∞—Ç—Ç–∞"___________',
                        '–•–ª–µ–± "–Ø—Ä–æ–≤—Å–∫–æ–π" —Ä–∂–∞–Ω–æ–π____',
                        '–ë—É–ª–æ—á–∫–∞ "–ö —á–∞—é"___________',
                        '–ë—É–ª–æ—á–∫–∞ "–° –∫–æ—Ä–∏—Ü–µ–π"_______',
                        '–ë—É–ª–æ—á–∫–∞ –° –∫–æ—Ä–∏—Ü. –∏ –∫—Ä–µ–º–æ–º ',
                        '–ë—É–ª–æ—á–∫–∞ "–° —á–µ—Å–Ω–æ–∫–æ–º"______',
                        '–ë—É–ª–æ—á–∫–∞ "–ì–∞–º–±—É—Ä–≥–µ—Ä" —Å –∫—É–Ω–∂',
                        '–ë—É–ª–æ—á–∫–∞ "–•–æ—Ç_–¥–æ–≥" —Å–¥–æ–±–Ω–∞—è_',
                        '–ë—É–ª–æ—á–∫–∞ "–ü–ª–µ—Ç—ë–Ω–∫–∞" —Å –º–∞–∫–æ–º',
                        '–ë—É–ª–æ—á–∫–∞ "–ü–ª—é—à–∫–∞"__________',
                        '"–†–∞—Å—Ç–µ–≥–∞–π c –ø–æ–≤–∏–¥–ª–æ–º"_____',
                        '"–†–æ–≥–∞–ª–∏–∫"_________________',
                        '"–†—É–ª–µ—Ç —Å –º–∞–∫–æ–º"___________',
                        '–¢–µ—Å—Ç–æ "–ü–∏—Ä–æ–∂–∫–æ–≤–æ–µ" –æ—Ö–ª–∞–∂–¥.',
                        '"–ü—Ä—è–Ω–∏–∫–∏"_________________',
                        '"–í–∞—Ç—Ä—É—à–∫–∞" —Å—Ç–≤–æ—Ä–æ–≥–æ–º______',
                        '"–í–∞—Ç—Ä—É—à–∫–∞" —Å —Å—ã—Ä–æ–º________',
                        '"–í–∞—Ç—Ä—É—à–∫–∞" —Å –∫–æ–Ω—Ñ–∏—Ç—é—Ä–æ–º___',
                        '–ë–µ–ª—è—à_–ø–µ—á–µ–Ω—ã–π_____________',
                        '"–ö–µ–∫—Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π"_______',
                        '"–ö–µ–∫—Å —à–æ–∫–æ–ª–∞–¥–Ω—ã–π"_________',
                        '"–ö—É–ª–µ–±—è–∫–∞"________________',
                        '"–ü–∏—Ä–æ–∂–æ–∫ —Å –∫–∞–ø—É—Å—Ç–æ–π"______',
                        '"–ü–∏—Ä–æ–∂–æ–∫ —Å —è–±–ª–æ–∫–∞–º–∏"______',
                        '"–ü–∏—Ü—Ü–∞_–º–∏–Ω–∏"______________',
                        '"–†–æ–º–æ–≤–∞—è –±–∞–±–∞"____________',
                        '"–°–æ—Å–∏—Å–∫–∞ –≤ —Ç–µ—Å—Ç–µ"_________'
                        ]
list_aplication1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0]

ADMIN = 1914231330

# –ü—Ä–∏–≤–µ—Ç—Å–∏–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
hi_text = '–ü—Ä–∏–≤–µ—Ç –Ω–∞—à –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ö–ª–µ–± –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!'


# —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É—é—â–∞—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def on_startup(_):
    print('–ü–æ–≥–Ω–∞–ª–∏!')


# —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
def clear_list_app():
    # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if len(list_aplication1) > 0:
        for ind in range(0, len(list_aplication1)):
            list_aplication1[ind] = 0

    # –∏ –æ—á–∏—Å—Ç–∏–º –∑–∞ —Å–æ–±–æ–π —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ—â–µ –¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É
    if len(id_and_name_clients) > 0:
        for i in range(len(id_and_name_clients)):
            del id_and_name_clients[0]

    # –≤–æ—Å—Ç–æ–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ id_and_name_clients2
    if len(id_and_name_clients2) > 1:
        for ind in range(len(id_and_name_clients2)):
            del id_and_name_clients[0]

    # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if len(id_clients_end_day_of_weec_permanent_applications) > 0:
        for i in range(len(id_clients_end_day_of_weec_permanent_applications)):
            del id_clients_end_day_of_weec_permanent_applications[0]


########################################################################################################################


# –ó–ê–Ø–í–ö–ê
########################################################################################################################
# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É '–°–¥–µ–ª–∞—Ç—å_–∑–∞—è–≤–∫—É' –∏ –≤—ã–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ö–ª–µ–±–∞
@dp.message_handler(Text(equals='–°–¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É üçû'))
async def cdm_make_application(message: types.Message):
    await message.delete()

    ind_list1 = 0
    ind_list2 = 0
    await message.answer(
        text='_________________________________',
        reply_markup=keyboard.back_cart_confirm(),  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂.
    )
    # await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)

    for brod in list_name_brod_osnov:
        await message.answer(text=f'<b>{brod}</b>',  # –ø–∏—à–µ–º —Ç–µ–∫—Å—Ç
                             reply_markup=keyboard.get_iline_keyboard(ind_list2, ind_list1),
                             parse_mode="HTML")  # –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ind_list2 += 1
    await message.answer(text='_________________________________')


# '+' –∫ –∑–∞—è–≤–∫–µ
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('+'))
async def ikb_cd_handler(callbeck: types.CallbackQuery):
    id = callbeck.from_user.id
    # –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥ –∫–∞–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ö–ª–µ–± –≤ —Å–ø–∏—Å–∫–µ
    # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∏ –Ω–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤(–ø–µ—Ä–≤—ã–π '+')
    if len(callbeck.data) == 2:
        # —Ç–æ–≥–¥–∞ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –∑–∞–∫–∞–∑—É –ø–æ –∏–Ω–¥–µ–∫—Å—É int(callbeck.data[1]),+1 –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤
        list_aplication1[int(callbeck.data[1])] += 1
        # –∑–∞—Ç–µ–º –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —à–∞–ø–∫–∏(–Ω–µ–∑–Ω–∞—é –º–æ–∂–Ω–æ –ª–∏ –æ–±–æ–π—Ç–∏—Å—å –±–µ–∑ —ç—Ç–æ–≥–æ) –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callbeck.message.edit_text(text=f'<b>{list_name_brod_osnov[int(callbeck.data[1])]}</b>',
                                         reply_markup=keyboard.get_iline_keyboard(callbeck.data[1],
                                                                                  list_aplication1[
                                                                                      int(callbeck.data[1])]),
                                         parse_mode="HTML")

    # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∏ —Ä–æ–≤–Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞–º(–ø–µ—Ä–≤—ã–π '+', –≤—Ç–æ—Ä–æ–π '1')
    elif len(callbeck.data) == 3 and int(callbeck.data[1]) == 1:
        list_aplication1[10 + int(callbeck.data[2])] += 1
        await callbeck.message.edit_text(
            text=f'<b>{list_name_brod_osnov[10 + int(callbeck.data[2])]}</b>',
            reply_markup=keyboard.get_iline_keyboard(10 + int(callbeck.data[2]),
                                                     list_aplication1[10 + int(callbeck.data[2])]),
            parse_mode="HTML")
    # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∏ —Ä–æ–≤–Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞–º(–ø–µ—Ä–≤—ã–π '+', –≤—Ç–æ—Ä–æ–π '2')
    elif len(callbeck.data) == 3 and int(callbeck.data[1]) == 2:
        list_aplication1[20 + int(callbeck.data[2])] += 1
        await callbeck.message.edit_text(
            text=f'<b>{list_name_brod_osnov[20 + int(callbeck.data[2])]}</b>',
            reply_markup=keyboard.get_iline_keyboard(20 + int(callbeck.data[2]),
                                                     list_aplication1[20 + int(callbeck.data[2])]),
            parse_mode="HTML")  # –ø–∏—à–µ–º —Ç–µ–∫—Å—Ç
    # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∏ —Ä–æ–≤–Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞–º(–ø–µ—Ä–≤—ã–π '+', –≤—Ç–æ—Ä–æ–π '3')
    elif len(callbeck.data) == 3 and int(callbeck.data[1]) == 3:
        list_aplication1[30 + int(callbeck.data[2])] += 1
        await callbeck.message.edit_text(
            text=f'<b>{list_name_brod_osnov[30 + int(callbeck.data[2])]}</b>',
            reply_markup=keyboard.get_iline_keyboard(30 + int(callbeck.data[2]),
                                                     list_aplication1[30 + int(callbeck.data[2])]),
            parse_mode="HTML")  # –ø–∏—à–µ–º —Ç–µ–∫—Å—Ç


# '-' –∫ –∑–∞—è–≤–∫–µ
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(
    '-'))  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–æ–±–∑–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞–±—â–∏–µ—Å—è –Ω–∞ '-'
async def ikb_cd_handler(callbeck: types.CallbackQuery):
    # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∏ –Ω–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤(–ø–µ—Ä–≤—ã–π '-')
    if len(callbeck.data) == 2:
        if list_aplication1[int(callbeck.data[1])] != 0:
            list_aplication1[int(callbeck.data[1])] -= 1
        await callbeck.message.edit_text(
            text=f'<b>{list_name_brod_osnov[int(callbeck.data[1])]}</b>',
            reply_markup=keyboard.get_iline_keyboard(callbeck.data[1],
                                                     list_aplication1[int(callbeck.data[1])]),
            parse_mode="HTML")
    # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∏ —Ä–æ–≤–Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞–º(–ø–µ—Ä–≤—ã–π '-', –≤—Ç–æ—Ä–æ–π '1')
    elif len(callbeck.data) == 3 and int(callbeck.data[1]) == 1:
        # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞—è–≤–æ–∫ –Ω–µ —Ä–æ–≤–Ω–æ –Ω—É–ª—é —Ç–æ–≥–¥–∞ –º–æ–∂–Ω–æ –æ—Ç–Ω—è—Ç—å 1 –æ—Ç –∑–∞—è–≤–∫–∏
        if list_aplication1[10 + int(callbeck.data[2])] != 0:
            list_aplication1[10 + int(callbeck.data[2])] -= 1
        await callbeck.message.edit_text(
            text=f'<b>{list_name_brod_osnov[10 + int(callbeck.data[2])]}</b>',
            reply_markup=keyboard.get_iline_keyboard(10 + int(callbeck.data[2]),
                                                     list_aplication1[10 + int(callbeck.data[2])]),
            parse_mode="HTML")
    # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∏ —Ä–æ–≤–Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞–º(–ø–µ—Ä–≤—ã–π '-', –≤—Ç–æ—Ä–æ–π '2')
    elif len(callbeck.data) == 3 and int(callbeck.data[1]) == 2:
        if list_aplication1[20 + int(callbeck.data[2])] != 0:
            list_aplication1[20 + int(callbeck.data[2])] -= 1
        await callbeck.message.edit_text(
            text=f'<b>{list_name_brod_osnov[20 + int(callbeck.data[2])]}</b>',
            reply_markup=keyboard.get_iline_keyboard(20 + int(callbeck.data[2]),
                                                     list_aplication1[20 + int(callbeck.data[2])]),
            parse_mode="HTML")

    # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∏ —Ä–æ–≤–Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞–º(–ø–µ—Ä–≤—ã–π '-', –≤—Ç–æ—Ä–æ–π '3')
    elif len(callbeck.data) == 3 and int(callbeck.data[1]) == 3:
        if list_aplication1[30 + int(callbeck.data[2])] != 0:
            list_aplication1[30 + int(callbeck.data[2])] -= 1
        await callbeck.message.edit_text(
            text=f'<b>{list_name_brod_osnov[30 + int(callbeck.data[2])]}</b>',
            reply_markup=keyboard.get_iline_keyboard(30 + int(callbeck.data[2]),
                                                     list_aplication1[30 + int(callbeck.data[2])]),
            parse_mode="HTML")


# '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏'
@dp.message_handler(Text(equals='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üí∞'))
async def reg_aplikations(message: types.Message):
    await message.delete()
    # –ø–æ–ª—É—á–∏–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å –∏–∑ bd
    id_clients = bd.name_and_id_clients(message.from_user.id)[0]
    name_clients = bd.name_and_id_clients(message.from_user.id)[1]

    # —Å–æ–∑–¥–∞–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç –≤ bd
    result_create_aplication = bd.create_request_table(id_clients, name_clients, list_aplication1)
    if result_create_aplication == True:
        await message.answer(text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è:\n{name_clients}',
                             reply_markup=keyboard.kb_menu())
        # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        for ind in range(0, len(list_aplication1)):
            list_aplication1[ind] = 0
    else:
        await message.answer(text=f'–î–ª—è "{name_clients}" —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞')
        await message.answer(text='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?',
                             reply_markup=keyboard.get_iline_keyboard_yes_no_look())


# –ö–æ—Ä–∑–∏–Ω–∞
@dp.message_handler(Text(equals='–ö–æ—Ä–∑–∏–Ω–∞ üõí'))
async def basket(message: types.Message):
    await message.delete()

    # —É–∑–Ω–∞–µ–º id –∫–ª–∏–µ–Ω—Ç–∞(—Å–ª–∞–≤–≥–æ—Ä–æ–¥ –∏–ª–∏ —è—Ä–æ–≤–æ–µ) –∏–∑ bd
    id_klients = bd.name_and_id_clients(message.from_user.id)[0]

    # –µ—Å–ª–∏ id –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —è—Ä–æ–≤–æ–º—É —Ç–æ–≥–¥–∞ –≤–æ–∑—å–º–µ–º –Ø—Ä–æ–≤—Å–∫–∏–µ —Ü–µ–Ω—ã —Ö–ª–µ–±–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –•–ª–µ–± –∏ –ø–æ–º–µ—Å—Ç–∏–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
    if id_klients[0] < 22:
        list_prise = bd.price_jrovoe_list()

    # –µ—Å–ª–∏ id –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –°–ª–∞–≤–≥–æ—Ä–æ–¥—É —Ç–æ–≥–¥–∞ –≤–æ–∑—å–º–µ–º –°–ª–∞–≤–≥–æ—Ä–æ–¥—Å–∫–∏–µ —Ü–µ–Ω—ã —Ö–ª–µ–±–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –•–ª–µ–± –∏ –ø–æ–º–µ—Å—Ç–∏–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
    else:
        list_prise = bd.price_slavgorod_list()

    # —Å–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã –∑–∞—è–≤–∫–∏
    ind = 0
    list_summ_aplication = []
    # –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–∫–∏ –∏ –≥–¥–µ –æ–Ω–∞ –µ—Å—Ç—å –ø–µ—Ä–µ–º–Ω–æ–∂–∏–º —Å —Ü–µ–Ω–æ–π –∏ –ø–æ–º–µ—Å—Ç–∏–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
    for i in list_aplication1:
        if i > 0:
            await message.answer(
                text=f'{list_name_brod_osnov[ind]} - {i}—à—Ç * {list_prise[ind]} = {i * list_prise[ind]} —Ä—É–±–ª–µ–π')
            list_summ_aplication.append(i * list_prise[ind])
        ind += 1
    summ = 0
    for i in list_summ_aplication:
        summ += i
    await message.answer(text=f'–ò—Ç–æ–≥–æ {summ}')


#  –î–∞, –ù–µ—Ç, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É - –Ω–∞ –≤–æ–ø—Ä–æ—Å'–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–∫—É'
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(
    '!'))
async def ikb_cd_handler(callback: types.CallbackQuery):
    # –ø–æ–ª—É—á–∏–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å
    id_clients = bd.name_and_id_clients(callback.from_user.id)[0]
    name_clients = bd.name_and_id_clients(callback.from_user.id)[1]
    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ '–î–∞'
    if callback.data[1] == '–î':
        # –∑–∞–π–¥–µ–º –≤ bd –∏ –∏—Å–ø—Ä–∞–≤–∏–º –∑–∞—è–≤–∫—É
        bd.change_old_aplikation(id_clients, list_aplication1)
        await callback.message.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª–∏ –∑–∞—è–≤–∫—É!',
                                      reply_markup=keyboard.kb_menu())
        # –≤–æ—Å—Ç–æ–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–∞—è–Ω–∏–µ
        for ind in range(0, len(list_aplication1)):
            list_aplication1[ind] = 0

    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ—Ç
    elif callback.data[1] == '–ù':
        await callback.message.answer(text='–•–æ—Ä–æ—à–æ –º—ã –æ—Å—Ç–∞–≤–∏–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å!',
                                      reply_markup=keyboard.kb_menu())

        # –≤–æ—Å—Ç–æ–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–∞—è–Ω–∏–µ
        for ind in range(0, len(list_aplication1)):
            list_aplication1[ind] = 0

    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É
    elif callback.data[1] == '–°':

        # –µ—Å–ª–∏ id –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —è—Ä–æ–≤–æ–º—É —Ç–æ–≥–¥–∞ –≤–æ–∑—å–º–µ–º –∏–∑ bd –Ø—Ä–æ–≤—Å–∫–∏–µ —Ü–µ–Ω—ã —Ö–ª–µ–±–∞ –∏ –ø–æ–º–µ—Å—Ç–∏–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
        if id_clients < 22:
            list_prise = bd.price_jrovoe_list()

        # –µ—Å–ª–∏ id –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –°–ª–∞–≤–≥–æ—Ä–æ–¥—É —Ç–æ–≥–¥–∞ –≤–æ–∑—å–º–µ–º –∏–∑ bd –°–ª–∞–≤–≥–æ—Ä–æ–¥—Å–∫–∏–µ —Ü–µ–Ω—ã —Ö–ª–µ–±–∞ –∏ –ø–æ–º–µ—Å—Ç–∏–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
        else:
            list_prise = bd.price_slavgorod_list()

        # —Å–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–º–µ—Å—Ç–∏–º –≤ –Ω–µ–≥–æ —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É –∏–∑ bd
        list_old_aplication = bd.old_aplication(name_clients)

        # —Å–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã –∑–∞—è–≤–∫–∏
        ind = 0
        list_summ_aplication = []

        # –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–∫–∏ –∏ –≥–¥–µ –æ–Ω–∞ –µ—Å—Ç—å –ø–µ—Ä–µ–º–Ω–æ–∂–∏–º —Å —Ü–µ–Ω–æ–π –∏ –ø–æ–º–µ—Å—Ç–∏–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        for i in list_old_aplication:

            if i > 0 and i:
                await callback.message.answer(
                    text=f'{list_name_brod_osnov[ind]} - {i}—à—Ç * {list_prise[ind]} = {i * list_prise[ind]} —Ä—É–±–ª–µ–π')
                list_summ_aplication.append(i * list_prise[ind])
            ind += 1
        summ = 0
        for i in list_summ_aplication:
            summ += i
        await callback.message.answer(text=f'–ò—Ç–æ–≥–æ {summ}')
        await callback.message.answer(text='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–∫—É?',
                                      reply_markup=keyboard.get_iline_keyboard_yes_no())


########################################################################################################################


# –ö–õ–ò–ï–ù–¢ –ú–ï–ù–Æ
########################################################################################################################

# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É '–Ω–∞–∑–∞–¥'
@dp.message_handler(Text(equals='‚¨ÖÔ∏è–Ω–∞–∑–∞–¥ '))
async def reg(message: types.Message):
    await message.delete()
    await message.answer(text='_________________________________',
                         reply_markup=keyboard.kb_menu())
    await message.delete()


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É '–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è'
@dp.message_handler(Text(equals='–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è'))
async def reg(message: types.Message):
    await message.delete()
    await message.answer(text=kontakts,
                         parse_mode="HTML")


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É '–í–∞–∫–∞–Ω—Å–∏–∏ üë§'
@dp.message_handler(Text(equals='–í–∞–∫–∞–Ω—Å–∏–∏ üë§'))
async def reg(message: types.Message):
    await message.delete()
    await message.answer(text=vacancies,
                         parse_mode="HTML")


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É '–ü—Ä–∞–π—Å-–Ø—Ä–æ–≤–æ–µ ü•®'
@dp.message_handler(Text(equals='–ü—Ä–∞–π—Å-–Ø—Ä–æ–≤–æ–µ ü•®'))
async def reg(message: types.Message):
    await message.delete()

    # –∑–∞–π–¥–µ–º –≤ bd, —Å–∫–∞—á–∞–µ–º –Ø—Ä–æ–≤—Å–∫–∏–µ —Ü–µ–Ω—ã –∏ –ø–æ–º–µ—Å—Ç–∏–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
    price_jrovoe = bd.price_jrovoe()

    # —Å–æ–∑–¥–∞–¥–∏–º –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–º–µ—Å—Ç–∏–º –≤ –Ω–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–∞–π—Å–∞
    price_brod_1 = ''
    price_brod_2 = ''
    # —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ 'x', –∏–∑-–∑–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ 20 —Å—Ç—Ä–æ–∫ (HTML)
    index_x = 0
    for i in price_jrovoe:
        if index_x < 20:
            index_x += 1
            price_brod_1 = f'{price_brod_1}<b>{i[1]}:\n</b>' \
                           f'<em>–≤–µ—Å</em> - {i[2]}–≥, ' \
                           f'<em>—Ü–µ–Ω–∞</em> - {i[3]}—Ä;\n'
        elif index_x > 19 or index_x < 42:
            price_brod_2 = f'{price_brod_2}<b>{i[1]}:\n</b>' \
                           f'<em>–≤–µ—Å</em> - {i[2]}–≥, ' \
                           f'<em>—Ü–µ–Ω–∞</em> - {i[3]}—Ä;\n'
    await message.answer(text=price_brod_1,
                         parse_mode="HTML")
    await message.answer(text=price_brod_2,
                         parse_mode="HTML")


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É '–ü—Ä–∞–π—Å-–°–ª–∞–≤–≥–æ—Ä–æ–¥ ü•ê'
@dp.message_handler(Text(equals='–ü—Ä–∞–π—Å-–°–ª–∞–≤–≥–æ—Ä–æ–¥ üç™'))
async def reg(message: types.Message):
    await message.delete()
    price_slavgorod = bd.price_slavgorod()
    # —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ 'x', –∏–∑-–∑–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ 20 —Å—Ç—Ä–æ–∫ (HTML)
    index_x = 0
    # —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ bd(–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –≤–µ—Å, —Ü–µ–Ω–∞)
    price_brod_1 = ''
    price_brod_2 = ''
    # –ø–æ–º–µ—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–ø–∏—Å–∫–∞
    for i in price_slavgorod:
        if index_x < 20:
            index_x += 1
            price_brod_1 = f'{price_brod_1}<b>{i[1]}:\n</b>' \
                           f'<em>–≤–µ—Å</em> - {i[2]}–≥, ' \
                           f'<em>—Ü–µ–Ω–∞</em> - {i[3]}—Ä;\n'
        elif index_x > 19 or index_x < 42:
            price_brod_2 = f'{price_brod_2}<b>{i[1]}:\n</b>' \
                           f'<em>–≤–µ—Å</em> - {i[2]}–≥, ' \
                           f'<em>—Ü–µ–Ω–∞</em> - {i[3]}—Ä;\n'
    await message.answer(text=price_brod_1,
                         parse_mode="HTML")
    await message.answer(text=price_brod_2,
                         parse_mode="HTML")


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üíå''
@dp.message_handler(Text(equals='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üíå'))
async def reg(message: types.Message):
    await message.delete()
    await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ.'
                              '–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä üë§ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!'
                              '–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!')


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞
@dp.message_handler(Text(contains='#'))
async def reg(message: types.Message):
    await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!')

    # –ø–æ–ª—É—á–∏–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å
    id_clients = bd.name_and_id_clients(message.from_user.id)[0]
    name_clients = bd.name_and_id_clients(message.from_user.id)[1]
    # –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –æ—Ç–∑—ã–≤–∞–º–∏ –≤ –±–¥
    bd.registration_review(id_clients, name_clients, message.text)
    # –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º –º–Ω–µ
    await bot.send_message(ADMIN, f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {name_clients}\n–°–æ–æ–±—â–µ–Ω–∏–µ:{message.text}')


########################################################################################################################


# –ê–î–ú–ò–ù –ú–ï–ù–Æ
########################################################################################################################

# menu '–ó–ê–Ø–í–ö–ò'
@dp.message_handler(Text(contains='–ó–∞—è–≤–∫–∏'))
async def admin_application(message: types.Message):
    await message.delete()
    await message.answer(text='–í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é "–ó–∞—è–≤–∫–∏"',
                         reply_markup=keyboard.kb_menu_application_admin())


# —Å–æ–∑–¥–∞–¥–∏–º —Å–ª–æ–≤–∞—Ä—å –∫—É–¥–∞, –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∫–ª–∏–µ–Ω—Ç—É
CLIENTS = {}


# menu '–ó–∞—è–≤–∫–∏' - –¥–æ–±–∞–≤–∏—Ç—å
@dp.message_handler(Text(contains='–î–æ–±–∞–≤–∏—Ç—å + üìù, –ò–∑–º–µ–Ω–∏—Ç—å üîÑ'))
async def add_application(message: types.Message):
    await message.delete()

    # –≤–æ–∑—å–º—ë–º –∏–∑ bd —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –≤—ã–¥–∞–¥–∏–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ id (–Ω—É–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å)
    list_clients = bd.id_and_name_all_clients()
    list_str_clients = ''
    for id_and_name in list_clients:
        list_str_clients = f'{list_str_clients}\n' \
                           f'id: <em>{id_and_name[0]}</em> - –∏–º—è: <em>{id_and_name[1]}</em> '
    # –≤—ã–≤–µ–¥–µ–º –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è —Å–ø–∏—Å–æ–∫
    await message.answer(text=f'<b>–ö–ª–∏–µ–Ω—Ç—ã:</b>\n'
                              f'{list_str_clients}',
                         parse_mode="HTML")
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ id –∫–ª–∏–µ–Ω—Ç–∞:')
    await FSMAdmin_applications_add.Id.set()


# '–ó–∞—è–≤–∫–∏' - –¥–æ–±–∞–≤–∏—Ç—å - –ª–æ–≤–∏–º id –∫–ª–∏–µ–Ω—Ç–∞
@dp.message_handler(state=FSMAdmin_applications_add.Id)
async def catch_id_clients(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        CLIENTS['id'] = int(message.text)


    # –≤–æ–∑—å–º–µ–º id –∏ –Ω–∞–π–¥–µ–º –ø–æ –Ω–µ–º—É –∏–º—è –∏–∑ bd
    CLIENTS['name_clients'] = bd.name_clients(CLIENTS['id'])

    # –∑–ø—É—Å—Ç–∏–º –∏–Ω–ª–∞–π–Ω –∑–∞—è–≤–∫—É
    ind_list1 = 0
    ind_list2 = 0
    await message.answer(
        text='–ù–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞____________________',
        reply_markup=keyboard.back_cart_confirm_admin(),  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂.
    )
    # await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)

    for brod in list_name_brod_osnov:
        await message.answer(text=f'<b>{brod}</b>',  # –ø–∏—à–µ–º —Ç–µ–∫—Å—Ç
                             reply_markup=keyboard.get_iline_keyboard(ind_list2, ind_list1),
                             parse_mode="HTML")  # –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ind_list2 += 1

    await message.answer(text='–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞_____________________')
    await state.finish()


@dp.message_handler(Text(equals='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úçÔ∏è'))
async def reg_applikations(message: types.Message):
    await message.delete()
    # –ø–æ–ª—É—á–∏–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å –∏–∑ bd
    id_clients = CLIENTS['id']
    name_clients = CLIENTS["name_clients"]

    # –∑–∞–ø–∏—à–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ id –∏ name –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –º–∑–º–µ–Ω–µ–Ω–∏–π –≤ —â–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –±–¥
    for i in (id_clients, name_clients):
        id_and_name_clients2.append(i)

    # —Å–æ–∑–¥–∞–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç –≤ bd
    result_create_aplication = bd.create_request_table(id_clients, name_clients, list_aplication1)
    if result_create_aplication == True:
        await message.answer(text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è:\n{name_clients}',
                             reply_markup=keyboard.kb_menu_admin())

        # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        clear_list_app()

    else:
        await message.answer(text=f'–î–ª—è "{name_clients}" —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞')
        await message.answer(text='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å ‚Åâ',
                             reply_markup=keyboard.get_inline_keyboard_yes_no_look_admin())
    CLIENTS.clear()


# –î–∞, –ù–µ—Ç, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É - –Ω–∞ –≤–æ–ø—Ä–æ—Å '–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–∫—É'
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('?'))
async def yes_no_look(callback: types.CallbackQuery):
    # –ø–æ–ª—É—á–∏–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å
    id_clients = id_and_name_clients2[0]
    name_clients = id_and_name_clients2[1]
    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ '–î–∞'
    if callback.data[1] == '–î':
        # –∑–∞–π–¥–µ–º –≤ bd –∏ –∏—Å–ø—Ä–∞–≤–∏–º –∑–∞—è–≤–∫—É
        bd.change_old_aplikation(id_clients, list_aplication1)
        await callback.message.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª–∏ –∑–∞—è–≤–∫—É!',
                                      reply_markup=keyboard.kb_menu_admin())

        # –≤–æ—Å—Ç–æ–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–∞—è–Ω–∏–µ
        clear_list_app()

    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ—Ç
    elif callback.data[1] == '–ù':
        await callback.message.answer(text='–•–æ—Ä–æ—à–æ –º—ã –æ—Å—Ç–∞–≤–∏–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å!',
                                      reply_markup=keyboard.kb_menu_admin())

        # –≤–æ—Å—Ç–æ–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–∞—è–Ω–∏–µ
        clear_list_app()

    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É
    elif callback.data[1] == '–°':

        # –µ—Å–ª–∏ id –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —è—Ä–æ–≤–æ–º—É —Ç–æ–≥–¥–∞ –≤–æ–∑—å–º–µ–º –∏–∑ bd –Ø—Ä–æ–≤—Å–∫–∏–µ —Ü–µ–Ω—ã —Ö–ª–µ–±–∞ –∏ –ø–æ–º–µ—Å—Ç–∏–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
        if int(id_clients) < 22:
            list_prise = bd.price_jrovoe_list()

        # –µ—Å–ª–∏ id –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –°–ª–∞–≤–≥–æ—Ä–æ–¥—É —Ç–æ–≥–¥–∞ –≤–æ–∑—å–º–µ–º –∏–∑ bd –°–ª–∞–≤–≥–æ—Ä–æ–¥—Å–∫–∏–µ —Ü–µ–Ω—ã —Ö–ª–µ–±–∞ –∏ –ø–æ–º–µ—Å—Ç–∏–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
        else:
            list_prise = bd.price_slavgorod_list()

        # —Å–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–º–µ—Å—Ç–∏–º –≤ –Ω–µ–≥–æ —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É –∏–∑ bd
        list_old_aplication = bd.old_aplication(name_clients)

        # —Å–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã –∑–∞—è–≤–∫–∏
        ind = 0
        list_summ_aplication = []

        # –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–∫–∏ –∏ –≥–¥–µ –æ–Ω–∞ –µ—Å—Ç—å –ø–µ—Ä–µ–º–Ω–æ–∂–∏–º —Å —Ü–µ–Ω–æ–π –∏ –ø–æ–º–µ—Å—Ç–∏–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        for i in list_old_aplication:

            if i > 0 and i:
                await callback.message.answer(
                    text=f'{list_name_brod_osnov[ind]} - {i}—à—Ç * {list_prise[ind]} = {i * list_prise[ind]} —Ä—É–±–ª–µ–π')
                list_summ_aplication.append(i * list_prise[ind])
            ind += 1
        summ = 0
        for i in list_summ_aplication:
            summ += i
        await callback.message.answer(text=f'–ò—Ç–æ–≥–æ {summ}')
        await callback.message.answer(text='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–∫—É?',
                                      reply_markup=keyboard.get_iline_keyboard_yes_no_admin())


# –ö–æ—Ä–∑–∏–Ω–∞
@dp.message_handler(Text(equals='–ö–æ—Ä–∑–∏–Ω–∞ üóë'))
async def basket(message: types.Message):
    await message.delete()

    # —É–∑–Ω–∞–µ–º id –∫–ª–∏–µ–Ω—Ç–∞(—Å–ª–∞–≤–≥–æ—Ä–æ–¥ –∏–ª–∏ —è—Ä–æ–≤–æ–µ) –∏–∑ bd
    id_klients = CLIENTS['id']

    # –µ—Å–ª–∏ id –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —è—Ä–æ–≤–æ–º—É —Ç–æ–≥–¥–∞ –≤–æ–∑—å–º–µ–º –Ø—Ä–æ–≤—Å–∫–∏–µ —Ü–µ–Ω—ã —Ö–ª–µ–±–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –•–ª–µ–± –∏ –ø–æ–º–µ—Å—Ç–∏–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
    if int(id_klients) < 22:
        list_prise = bd.price_jrovoe_list()

    # –µ—Å–ª–∏ id –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –°–ª–∞–≤–≥–æ—Ä–æ–¥—É —Ç–æ–≥–¥–∞ –≤–æ–∑—å–º–µ–º –°–ª–∞–≤–≥–æ—Ä–æ–¥—Å–∫–∏–µ —Ü–µ–Ω—ã —Ö–ª–µ–±–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –•–ª–µ–± –∏ –ø–æ–º–µ—Å—Ç–∏–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
    else:
        list_prise = bd.price_slavgorod_list()

    # —Å–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã –∑–∞—è–≤–∫–∏
    ind = 0
    list_summ_aplication = []
    # –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–∫–∏ –∏ –≥–¥–µ –æ–Ω–∞ –µ—Å—Ç—å –ø–µ—Ä–µ–º–Ω–æ–∂–∏–º —Å —Ü–µ–Ω–æ–π –∏ –ø–æ–º–µ—Å—Ç–∏–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
    for i in list_aplication1:
        if i > 0:
            await message.answer(
                text=f'{list_name_brod_osnov[ind]} - {i}—à—Ç * {list_prise[ind]} = {i * list_prise[ind]} —Ä—É–±–ª–µ–π')
            list_summ_aplication.append(i * list_prise[ind])
        ind += 1
    summ = 0
    for i in list_summ_aplication:
        summ += i
    await message.answer(text=f'–ò—Ç–æ–≥–æ {summ}')


# '–ó–∞—è–≤–∫–∏' - —É–¥–∞–ª–∏—Ç—å
@dp.message_handler(Text(equals='–£–¥–∞–ª–∏—Ç—å üóë'))
async def clear_app(message: types.Message):
    await message.delete()

    # –≤–æ–∑—å–º—ë–º –∏–∑ bd —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –≤—ã–¥–∞–¥–∏–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ id (–Ω—É–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å)
    list_clients = bd.id_and_name_all_clients()
    list_str_clients = ''
    for id_and_name in list_clients:
        list_str_clients = f'{list_str_clients}\n' \
                           f'id: <em>{id_and_name[0]}</em> - –∏–º—è: <em>{id_and_name[1]}</em> '
    # –≤—ã–≤–µ–¥–µ–º –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è —Å–ø–∏—Å–æ–∫
    await message.answer(text=f'<b>–ö–ª–∏–µ–Ω—Ç—ã:</b>\n'
                              f'{list_str_clients}',
                         parse_mode="HTML")
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ id –∫–ª–∏–µ–Ω—Ç–∞')
    await FSMAdmin_applications_del.Id.set()


# '–ó–∞—è–≤–∫–∏' - —É–¥–∞–ª–∏—Ç—å - –ª–æ–≤–∏–º id –∫–ª–∏–µ–Ω—Ç–∞
@dp.message_handler(state=FSMAdmin_applications_del.Id)
async def catch_id_clients(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        CLIENTS['id'] = int(message.text)


    # –≤–æ–∑—å–º–µ–º id –∏ –Ω–∞–π–¥–µ–º –ø–æ –Ω–µ–º—É –∏–º—è –∏–∑ bd
    CLIENTS['name_clients'] = bd.name_clients(CLIENTS['id'])

    # –∑–∞–π–¥–µ–º –≤ bd –∏ —É–¥–∞–ª–∏–º –∑–∞–ø–∏—Å—å –ø–æ id

    bd.del_applications(CLIENTS['id'])

    # –≤—ã–≤–æ–¥–∏–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    await message.answer(text=f'–ó–∞—è–≤–∫–∞ –¥–ª—è {CLIENTS["name_clients"]} –Ω–∞ –∑–∞–≤—Ç—Ä–∞, —É—Å–ø–µ—à–Ω–æ –£–î–ê–õ–ï–ù–ê!!!',
                         reply_markup=keyboard.kb_menu_admin())
    await state.finish()
#
# # '–ó–∞—è–≤–∫–∏'- –£–¥–∞–ª–∏—Ç—å - –ª–æ–≤–∏–º ID –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
# @dp.message_handler(Text(contains='ud'))
# async def get_days_of_week(message: types.Message):
#     # –≤–æ–∑—å–º–µ–º id –∏–∑ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–π–¥–µ–º –ø–æ –Ω–µ–º—É –∏–º—è –∏–∑ bd
#     id_clients = message.text[2:len(message.text)]
#     name_clients = bd.name_clients(id_clients)
#
#     # –∑–∞–π–¥–µ–º –≤ bd –∏ —É–¥–∞–ª–∏–º –∑–∞–ø–∏—Å—å –ø–æ id
#
#     bd.del_applications(id_clients)
#
#     # –≤—ã–≤–æ–¥–∏–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
#     await message.answer(text=f'–ó–∞—è–≤–∫–∞ –¥–ª—è {name_clients} –Ω–∞ –∑–∞–≤—Ç—Ä–∞, —É—Å–ø–µ—à–Ω–æ –£–î–ê–õ–ï–ù–ê!!!',
#                          reply_markup=keyboard.kb_menu_admin())


# menu '–ü–û–°–¢–û–Ø–ù–ù–´–ï –ó–ê–Ø–í–ö–ò'
@dp.message_handler(Text(contains='–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'))
async def admin_application(message: types.Message):
    await message.delete()
    await message.answer(text='–í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"',
                         reply_markup=keyboard.kb_menu_constant_application_admin())


# '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏' - –¥–æ–±–∞–≤–∏—Ç—å
@dp.message_handler(Text(contains='–î–æ–±–∞–≤–∏—Ç—å üñå, –ò–∑–º–µ–Ω–∏—Ç—å üîÑ'))
async def add_application(message: types.Message):
    await message.delete()

    # –≤–æ–∑—å–º—ë–º –∏–∑ bd —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –≤—ã–¥–∞–¥–∏–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ id (–Ω—É–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å)
    list_clients = bd.id_and_name_all_clients()
    list_str_clients = ''
    for id_and_name in list_clients:
        list_str_clients = f'{list_str_clients}\n' \
                           f'id: <em>{id_and_name[0]}</em> - –∏–º—è: <em>{id_and_name[1]}</em> '
    # –≤—ã–≤–µ–¥–µ–º –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è —Å–ø–∏—Å–æ–∫
    await message.answer(text=f'<b>–ö–ª–∏–µ–Ω—Ç—ã:</b>\n'
                              f'{list_str_clients}',
                         parse_mode="HTML")
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ id –∫–ª–∏–µ–Ω—Ç–∞:')

    await FSMAdmin_constant_applications_add.Id.set()


# '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'- –¥–æ–±–∞–≤–∏—Ç—å - –ª–æ–≤–∏–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤—ã–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
@dp.message_handler(state=FSMAdmin_constant_applications_add.Id)
async def get_days_of_week(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        CLIENTS['id'] = int(message.text)
    # –≤–æ–∑—å–º–µ–º id –∏–∑ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–π–¥–µ–º –ø–æ –Ω–µ–º—É –∏–º—è
    CLIENTS['name_clients'] = bd.name_clients(CLIENTS['id'])

    # –≤—ã–≤–æ–¥–∏–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    await message.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ üóì',
                         reply_markup=keyboard.get_inline_keyboard_deys_of_week('add'))
    await state.finish()


# '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'- –¥–æ–±–∞–≤–∏—Ç—å - –ª–æ–≤–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—ã–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª –¥–ª—è –∑–∞—è–≤–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏(—Å—Ç–∞—Ä–æ–π –∑–∞—è–≤–∫–æ–π)
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('add'))
async def get_application(callback: types.CallbackQuery):
    # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    CLIENTS['name_table'] = callback.data[3:len(callback.data)]
    id_clients = CLIENTS['id']

    # –ø–æ–¥–≥—Ä—É–∑–∏–º —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    list_permanent_applications = bd.permanent_applications(id_clients, CLIENTS['name_table'])

    # –µ—Å–ª–∏ –Ω–µ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å—Ç–∞—Ä–æ–π –∑–∞—è–≤–∫–∏, —Ç–æ –∑–∞–≥—Ä—É–∑–∏–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if len(list_permanent_applications) < 2:
        ind_list1 = 0
        ind_list2 = 0
        for brod in list_name_brod_osnov:
            await callback.message.answer(text=f'<b>{brod}</b>',  # –ø–∏—à–µ–º —Ç–µ–∫—Å—Ç
                                          reply_markup=keyboard.get_iline_keyboard(ind_list2, ind_list1),
                                          parse_mode="HTML")  # –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            ind_list2 += 1
        await callback.message.answer(text='–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞_____________________',
                                      reply_markup=keyboard.confirm_applications())

    # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç–æ –¥–µ–Ω—å, —Ç–æ –ø–æ–¥—Å—Ç–∞–≤–∏–º —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è
    else:
        # —É–¥–∞–ª–∏–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞ ID –∏ NAME
        del list_permanent_applications[0]
        del list_permanent_applications[0]
        # –∑–∞–ø–∏—à–∏–º –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –∑–∞—è–≤–∫–∏ –≤ list_applications1
        ind = 0
        for x in list_permanent_applications:
            list_aplication1.insert(ind, x)
            ind += 1

        ind_list1 = 0
        ind_list2 = 0
        for brod in list_name_brod_osnov:
            await callback.message.answer(text=f'<b>{brod}</b>',  # –ø–∏—à–µ–º —Ç–µ–∫—Å—Ç
                                          reply_markup=keyboard.get_iline_keyboard(ind_list2,
                                                                                   list_aplication1[ind_list1]),
                                          parse_mode="HTML")  # –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            ind_list2 += 1
            ind_list1 += 1
        await callback.message.answer(text='–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞_____________________',
                                      reply_markup=keyboard.confirm_applications())


# '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'- –¥–æ–±–∞–≤–∏—Ç—å- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
@dp.message_handler(Text(equals='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!'))
async def admin_application(message: types.Message):
    await message.delete()
    # –ø–æ–ª—É—á–∏–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π id_clients_end_day_of_weec_permanent_applications
    id_clients = CLIENTS['id']
    name_clients = CLIENTS['name_clients']
    name_table = CLIENTS['name_table']

    # –∑–∞–ø–∏—à–µ–º –Ω–∞—à—É –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∑–∞—è–≤–∫—É –≤ bd
    result_create_application = bd.save_permanent_applications(id_clients, name_clients, list_aplication1, name_table)
    if result_create_application == True:
        await message.answer(text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è:\n{name_clients}\n'
                                  f'–≤(–≤–æ): {name_table}',
                             reply_markup=keyboard.kb_menu_admin())
        # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        clear_list_app()
    # –æ—á–∏—Å—Ç–∏–º —Å–ª–æ–≤–∞—Ä—å
    CLIENTS.clear()
# '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏' - –£–¥–∞–ª–∏—Ç—å
@dp.message_handler(Text(equals='–£–¥–∞–ª–∏—Ç—å üöÆ'))
async def add_application(message: types.Message):
    await message.delete()

    # –≤–æ–∑—å–º—ë–º –∏–∑ bd —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –≤—ã–¥–∞–¥–∏–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ id (–Ω—É–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å)
    list_clients = bd.id_and_name_all_clients()
    list_str_clients = ''
    for id_and_name in list_clients:
        list_str_clients = f'{list_str_clients}\n' \
                           f'id: <em>{id_and_name[0]}</em> - –∏–º—è: <em>{id_and_name[1]}</em> '
    # –≤—ã–≤–µ–¥–µ–º –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è —Å–ø–∏—Å–æ–∫
    await message.answer(text=f'<b>–ö–ª–∏–µ–Ω—Ç—ã:</b>\n'
                              f'{list_str_clients}',
                         parse_mode="HTML")
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ id –∫–ª–∏–µ–Ω—Ç–∞')

    await FSMAdmin_constant_applications_del.Id.set()

# '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'- –£–¥–∞–ª–∏—Ç—å - –ª–æ–≤–∏–º ID –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
@dp.message_handler(state=FSMAdmin_constant_applications_del.Id)
async def get_days_of_week(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        CLIENTS['id'] = int(message.text)
    # –≤–æ–∑—å–º–µ–º id –∏–∑ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–π–¥–µ–º –ø–æ –Ω–µ–º—É –∏–º—è –∏–∑ bd
    CLIENTS['name_clients'] = bd.name_clients(CLIENTS['id'])


    # –≤—ã–≤–æ–¥–∏–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    await message.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ üóì',
                         reply_markup=keyboard.get_inline_keyboard_deys_of_week('del'))
    await state.finish()


# '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'- –£–¥–∞–ª–∏—Ç—å - –ª–æ–≤–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∑–∞—è–≤–∫—É
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('del'))
async def get_aplication(callback: types.CallbackQuery):
    # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º id –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    id_clients = CLIENTS['id']
    name_table = callback.data[3:len(callback.data)]
    name_clients = CLIENTS['name_clients']

    # –∑–∞—Ö–æ–¥–∏–º –≤ bd –∏ —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∑–∞—è–≤–∫—É –ø–æ id
    result = bd.del_permanent_applications(id_clients, name_table)

    if result == True:
        await callback.message.answer(text=f'–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è {name_clients}\n'
                                           f'–≤(–≤–æ) - {name_table}')
    else:
        await callback.message.answer(text=f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')

    # –æ—á–∏—Å—Ç–∏–º –Ω–∞—à–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    clear_list_app()
    CLIENTS.clear()

# menu '–ö–õ–ò–ï–ù–¢–´'
@dp.message_handler(Text(equals='–ö–ª–∏–µ–Ω—Ç—ã üë§'))
async def admin_application(message: types.Message):
    await message.delete()
    await message.answer(text='–í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é "–ö–ª–∏–µ–Ω—Ç—ã"',
                         reply_markup=keyboard.kb_menu_clients_admin())


# –ö–ª–∏–µ–Ω—Ç—ã - –¥–æ–±–∞–≤–∏—Ç—å
@dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å + üë§', ignore_case=True), state=None)
async def start_work(message: types.Message):
    await FSMAdmin_Clients.Name.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä - –û–û–û –ö–æ–ª–æ—Å',
                         reply_markup=keyboard.get_cancel())


# –í—ã—Ö–æ–¥ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(commands=['cancel'], state='*')  # –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ cancel –≤ –ª—é–±–æ–º –∏–∑ —Å–æ—Å—Ç–∞—è–Ω–∏–π
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state == None:
        return

    await state.finish()
    await message.reply('–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!',
                        reply_markup=keyboard.kb_menu_admin())


# –ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ############
@dp.message_handler(state=FSMAdmin_Clients.Name)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await FSMAdmin_Clients.next()
    await message.reply('–ó–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


@dp.message_handler(state=FSMAdmin_Clients.Phone_number)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Phone_number'] = message.text
    await FSMAdmin_Clients.next()
    await message.reply('–ê —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞')


@dp.message_handler(state=FSMAdmin_Clients.Address)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Address'] = message.text
    await FSMAdmin_Clients.next()
    await message.reply('–ò –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞')


@dp.message_handler(state=FSMAdmin_Clients.Name_shop)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Name_shop'] = message.text

    await FSMAdmin_Clients.next()
    await message.answer(f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n'
                         f'–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: {data["name"]}\n'
                         f'–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["Phone_number"]}\n'
                         f'–∞–¥—Ä–µ—Å: {data["Address"]}\n'
                         f'–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ : {data["Name_shop"]}\n'
                         f'\n'
                         f'–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"')


# –ö–ª–∏–µ–Ω—Ç—ã - –¥–æ–±–∞–≤–∏—Ç—å - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.message_handler(commands=['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'], state=FSMAdmin_Clients.Confirmation)
async def cmd_cancel(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        list_clients = [data['name'], data['Phone_number'], data['Address'], data['Name_shop']]

    # –∑–∞–ø–∏—Å–∞—Ç—å –≤ bd
    result = bd.add_clients(list_clients)

    if result == True:
        await state.finish()
        await message.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!',
                            reply_markup=keyboard.kb_menu_admin())




# –ö–õ–ò–ï–ù–¢–´ - –ò–ó–ú–ï–ù–ò–¢–¨
@dp.message_handler(Text(equals='–ò–∑–º–µ–Ω–∏—Ç—å üîÑ üë§', ignore_case=True), state=None)
async def client_change(message: types.Message):
    await message.delete()
    await FSMAdmin_Clients_change.Id.set()

    # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å id
    list_clients = bd.id_and_name_all_clients()
    list_str_clients = ''
    for id_and_name in list_clients:
        list_str_clients = f'{list_str_clients}\n' \
                           f'id: <em>{id_and_name[0]}</em> - –∏–º—è: <em>{id_and_name[1]}</em> '
    # –≤—ã–≤–µ–¥–µ–º –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è —Å–ø–∏—Å–æ–∫
    await message.answer(text=f'<b>–ö–ª–∏–µ–Ω—Ç—ã:</b>\n'
                              f'{list_str_clients}',
                         parse_mode="HTML")
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ id –∫–ª–∏–µ–Ω—Ç–∞:',
                         reply_markup=keyboard.get_cancel())


# –ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ############
@dp.message_handler(state=FSMAdmin_Clients_change.Id)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:

        data['id'] = message.text
        # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º –ø—Ä–∞–π—Å —Ö–ª–µ–±–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        list_clients = bd.get_info_client(int(data['id']))


    # –ü–æ–º–µ—Å—Ç–∏–º –≤ –Ω–∞—à —Å–ª–æ–≤–∞—Ä—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    global CLIENTS
    CLIENTS = {'id': int(message.text), 'name': list_clients[1], 'phone_number': list_clients[2],
               'address': list_clients[3], 'name_shop': list_clients[4]}

    await message.answer(f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {list_clients[1]}',
                         reply_markup=keyboard.get_inline_keyboard_client_change('–∏–º—è'))
    await state.finish()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('–ú–µ–Ω—è–µ–º'))
async def change(callback: types.CallbackQuery):
    if callback.data == '–ú–µ–Ω—è–µ–º –∏–º—è':
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
        await FSMAdmin_Clients_change.Name.set()
    if callback.data == '–ú–µ–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω ':
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä:')
        await FSMAdmin_Clients_change.Phone_number.set()

    if callback.data == '–ú–µ–Ω—è–µ–º –∞–¥—Ä–µ—Å':
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:')
        await FSMAdmin_Clients_change.Address.set()

    if callback.data == '–ú–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞':
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
        await FSMAdmin_Clients_change.Name_shop.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('–í–ø–µ—Ä–µ–¥'))
async def change(callback: types.CallbackQuery):
    if callback.data == '–í–ø–µ—Ä–µ–¥ –∏–º—è':
        await callback.message.answer(f'–ù–æ–º–µ—Ä:  {CLIENTS["phone_number"]}',
                                      reply_markup=keyboard.get_inline_keyboard_client_change('—Ç–µ–ª–µ—Ñ–æ–Ω'))

    if callback.data == '–í–ø–µ—Ä–µ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω':
        await callback.message.answer(f'–ê–¥—Ä–µ—Å: {CLIENTS["address"]}"',
                                      reply_markup=keyboard.get_inline_keyboard_client_change('–∞–¥—Ä–µ—Å'))

    if callback.data == '–í–ø–µ—Ä–µ–¥ –∞–¥—Ä–µ—Å':
        await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {CLIENTS["name_shop"]}',
                                      reply_markup=keyboard.get_inline_keyboard_client_change('–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞'))


@dp.message_handler(state=FSMAdmin_Clients_change.Name)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        CLIENTS['name'] = message.text

    # –∏–∑ bd –≤—ã—Ç–∞—â–∏–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–º–µ—Å—Ç–∏–º –≤ —Å–ø–∏—Å–æ–∫
    client = bd.get_info_client(CLIENTS['id'])

    await state.finish()
    await message.answer(f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ‚öñÔ∏è{CLIENTS["phone_number"]}',
                         reply_markup=keyboard.get_inline_keyboard_client_change('—Ç–µ–ª–µ—Ñ–æ–Ω'))


@dp.message_handler(state=FSMAdmin_Clients_change.Phone_number)
async def load_photo_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        CLIENTS['phone_number'] = message.text

    # –∏–∑ bd –≤—ã—Ç–∞—â–∏–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–º–µ—Å—Ç–∏–º –≤ —Å–ø–∏—Å–æ–∫
    client = bd.get_info_client(CLIENTS['id'])

    await state.finish()
    await message.reply(f'C—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å: {CLIENTS["address"]}\n',
                        reply_markup=keyboard.get_inline_keyboard_client_change('–∞–¥—Ä–µ—Å'))


@dp.message_handler(state=FSMAdmin_Clients_change.Address)
async def load_address(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        CLIENTS['address'] = message.text

    # –∏–∑ bd –≤—ã—Ç–∞—â–∏–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–º–µ—Å—Ç–∏–º –≤ —Å–ø–∏—Å–æ–∫
    client = bd.get_info_client(CLIENTS['id'])

    await state.finish()
    await message.reply(f'–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {CLIENTS["name_shop"]}\n',
                        reply_markup=keyboard.get_inline_keyboard_client_change('–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞'))


@dp.message_handler(state=FSMAdmin_Clients_change.Name_shop)
async def load_name_shop(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        CLIENTS['name_shop'] = message.text

    await FSMAdmin_Clients_change.next()
    await message.answer(f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n'
                         f'–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: {CLIENTS["name"]}\n'
                         f'–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {CLIENTS["phone_number"]}\n'
                         f'–∞–¥—Ä–µ—Å: {CLIENTS["address"]}\n'
                         f'–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ : {CLIENTS["name_shop"]}\n'
                         f'\n'
                         f'–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"')


# –ö–ª–∏–µ–Ω—Ç—ã - –∏–∑–º–µ–Ω–∏—Ç—å - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(commands=['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'], state=FSMAdmin_Clients_change.Confirmation)
async def cmd_cancel(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        list_clients = [CLIENTS['id'], CLIENTS['name'], CLIENTS['phone_number'], CLIENTS['address'], CLIENTS['name_shop']]

    # –∑–∞–ø–∏—Å–∞—Ç—å –≤ bd
    result = bd.change_clients(list_clients)
    if result == True:
        await state.finish()
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞!',
                             reply_markup=keyboard.kb_menu_admin())


# –ö–ª–∏–µ–Ω—Ç—ã - –£–î–ê–õ–ò–¢–¨
@dp.message_handler(Text(equals='–£–¥–∞–ª–∏—Ç—å üöÆ üë§', ignore_case=True), state=None)
async def client_del(message: types.Message):
    await message.delete()
    await FSMAdmin_Clients_del.Id.set()

    # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å id
    list_clients = bd.id_and_name_all_clients()
    list_str_clients = ''
    for id_and_name in list_clients:
        list_str_clients = f'{list_str_clients}\n' \
                           f'id: <em>{id_and_name[0]}</em> - –∏–º—è: <em>{id_and_name[1]}</em> '
    # –≤—ã–≤–µ–¥–µ–º –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è —Å–ø–∏—Å–æ–∫
    await message.answer(text=f'<b>–ö–ª–∏–µ–Ω—Ç—ã:</b>\n'
                              f'{list_str_clients}',
                         parse_mode="HTML")
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ id –∫–ª–∏–µ–Ω—Ç–∞:',
                         reply_markup=keyboard.get_cancel())


# –ö–ª–∏–µ–Ω—Ç—ã - –£–î–ê–õ–ò–¢–¨ - –∫–ª–∏–µ–Ω—Ç–∞
@dp.message_handler(state=FSMAdmin_Clients_del.Id)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id'] = message.text

    # –∏–∑ bd –≤—ã—Ç–∞—â–∏–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–º–µ—Å—Ç–∏–º –≤ —Å–ø–∏—Å–æ–∫
    client = bd.get_info_client(data['id'])

    await FSMAdmin_Clients_del.next()
    await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {client[1]}')
    await message.answer(f'–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"')


# –ö–ª–∏–µ–Ω—Ç—ã - —É–¥–∞–ª–∏—Ç—å - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@dp.message_handler(commands=['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'], state=FSMAdmin_Clients_del.Confirmation)
async def cmd_cancel(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –∏–∑ bd –≤—ã—Ç–∞—â–∏–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–º–µ—Å—Ç–∏–º –≤ —Å–ø–∏—Å–æ–∫
        client = bd.get_info_client(data['id'])
        # —É–¥–∞–ª—è–µ–º –∏–∑ bd
        result = bd.del_clients(data['id'])

    if result == True:
        await state.finish()
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client[1]}!',
                             reply_markup=keyboard.kb_menu_admin())


# –ö–ª–∏–µ–Ω—Ç—ã - —É–¥–∞–ª–∏—Ç—å - –≤—ã—Ö–æ–¥ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–∞—è–Ω–∏–π
@dp.message_handler(commands=['cancel'], state='*')  # –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ cancel –≤ –ª—é–±–æ–º –∏–∑ —Å–æ—Å—Ç–∞—è–Ω–∏–π
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state == None:
        return

    await state.finish()
    await message.reply('–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!',
                        reply_markup=keyboard.kb_menu_admin())

    # –æ—á–∏—Å—Ç–∏–º —Å–ª–æ–≤–∞—Ä—å
    BROD.clear()


########################################################################################################################


# menu '–•–ª–µ–±'
@dp.message_handler(Text(equals='–•–ª–µ–± üçû'))
async def admin_application(message: types.Message):
    await message.delete()
    await message.answer(text='–í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é "–•–ª–µ–±"',
                         reply_markup=keyboard.kb_menu_brod_admin())


# menu '–•–ª–µ–±'- –î–æ–±–∞–≤–∏—Ç—å
@dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å + üçû'))
async def brod_add(message: types.Message):
    await FSMAdmin_Brod_add.Name.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–ª–µ–±–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä - –•–ª–µ–± –°—Ç–µ–ø–Ω–æ–π',
                         reply_markup=keyboard.get_cancel())


@dp.message_handler(state=FSMAdmin_Brod_add.Name)
async def load_brod_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await FSMAdmin_Brod_add.next()
    await message.reply('–ó–∞–ø–∏—à–∏—Ç–µ –≤–µ—Å —Ö–ª–µ–±–∞ –≤ –≥—Ä–∞–º–º–∞—Ö –Ω–∞–ø—Ä–∏–º–µ—Ä: 500')


@dp.message_handler(state=FSMAdmin_Brod_add.Heft)
async def load_brod_heft(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['heft'] = message.text
    await FSMAdmin_Brod_add.next()
    await message.reply('–ê —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ö–ª–µ–±–∞ –¥–ª—è –Ø—Ä–æ–≤–æ–≥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 40')


@dp.message_handler(state=FSMAdmin_Brod_add.Price_jr)
async def load_brod_price_jr(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price_jr'] = message.text
    await FSMAdmin_Brod_add.next()
    await message.reply('–ò —Ü–µ–Ω—É —Ö–ª–µ–±–∞ –¥–ª—è –°–ª–∞–≤–≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 41')


@dp.message_handler(state=FSMAdmin_Brod_add.Price_sl)
async def load_brod_price_sl(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price_sl'] = message.text

    await FSMAdmin_Brod_add.next()
    await message.reply('–ê —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ö–ª–µ–±–∞:')


@dp.message_handler(lambda message: not message.photo, state=FSMAdmin_Brod_add.Photo)
async def check_photo(message: types.Message):
    return await message.reply('—ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ')


@dp.message_handler(lambda message: message.photo, content_types=['photo'], state=FSMAdmin_Brod_add.Photo)
async def load_brod_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id

    await FSMAdmin_Brod_add.next()
    await bot.send_photo(chat_id=message.from_user.id,
                         photo=data['photo'],
                         caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {data["name"]}\n'
                                 f'–í–µ—Å: {data["heft"]}\n'
                                 f'–¶–µ–Ω–∞ –¥–ª—è –Ø—Ä–æ–≤–æ–≥–æ: {data["price_jr"]}\n'
                                 f'–¶–µ–Ω–∞ –¥–ª—è –°–ª–∞–≤–≥–æ—Ä–æ–¥–∞: {data["price_sl"]}\n')
    await message.answer(text='–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"')


@dp.message_handler(commands=['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'], state=FSMAdmin_Brod_add.Confirmation)
async def cmd_cancel(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        list_data_brod_add = [data["name"], data["heft"], data["price_jr"], data["price_sl"], data["photo"]]
        # –∑–∞–ø–∏—à–µ–º –Ω–æ–≤—ã–π —Ö–ª–µ–± –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö=
        result = bd.add_brod(list_data_brod_add)

    if result == True:
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ {data["name"]} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!',
                             reply_markup=keyboard.kb_menu_admin())
        await state.finish()


# menu '–•–ª–µ–±'- –ò–∑–º–µ–Ω–∏—Ç—å

# —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å –≤ –Ω–µ—ë –Ω–æ–≤—É–± –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–ª–µ–±–µ
BROD = {}

@dp.message_handler(Text(equals='–ò–∑–º–µ–Ω–∏—Ç—å üçûüîÑü•ñ'))
async def brod_add(message: types.Message):
    await FSMAdmin_Brod_change.ID.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–ª–µ–±–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä - –•–ª–µ–± –°—Ç–µ–ø–Ω–æ–π',
                         reply_markup=keyboard.get_cancel())
    # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º –ø—Ä–∞–π—Å —Ö–ª–µ–±–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    list_brod = bd.price_brod()
    # —Å–¥–µ–ª–∞–µ–º –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ö–ª–µ–±—É(id-–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
    list_str_brod = ''
    for id_and_name in list_brod:
        list_str_brod = f'{list_str_brod}\n' \
                        f'id: <em>{id_and_name[0]}</em> - –∏–º—è: <em>{id_and_name[1]}</em> '
    # –≤—ã–≤–µ–¥–µ–º –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è —Å–ø–∏—Å–æ–∫
    await message.answer(text=f'<b>–ü—Ä–∞–π—Å:</b>\n'
                              f'{list_str_brod}',
                         parse_mode="HTML")
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π id :',
                         reply_markup=keyboard.get_cancel())


@dp.message_handler(state=FSMAdmin_Brod_change.ID)
async def load_id(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id'] = int(message.text)
        # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º –ø—Ä–∞–π—Å —Ö–ª–µ–±–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        list_brod = bd.price_brod()

        list_brod_change = []
        # –í—ã—Ç–∞—â–∏–º –Ω—É–∂–Ω—ã–π –Ω–∞–º —Ö–ª–µ–± —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ id –∏ –ø–æ–º–µ—Å—Ç–∏–º –≤ —Å–ø–∏—Å–æ–∫
        for brod in list_brod:
            if brod[0] == data['id']:
                for brod_data in brod:
                    list_brod_change.append(brod_data)

    # –ü–æ–º–µ—Å—Ç–∏–º –≤ –Ω–∞—à —Å–ª–æ–≤–∞—Ä—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    global BROD
    BROD = {'id': message.text, 'name': list_brod_change[1], 'heft': list_brod_change[2],
            'price_jr': list_brod_change[3], 'price_sl': list_brod_change[4], 'photo': list_brod_change[5]}

    await message.answer(f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ü•®{list_brod_change[1]}ü•®',
                         reply_markup=keyboard.get_inline_keyboard_brod_change3('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'))
    await state.finish()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('–ò–∑–º–µ–Ω'))
async def change(callback: types.CallbackQuery):
    if callback.data == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
        await FSMAdmin_Brod_change.Name.set()

    if callback.data == '–ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å':
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤–µ—Å:')
        await FSMAdmin_Brod_change.Heft.set()

    if callback.data == '–ò–∑–º–µ–Ω–∏—Ç—å –¶–µ–Ω–∞ –Ø—Ä–æ–≤–æ–µ':
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:')
        await FSMAdmin_Brod_change.Price_jr.set()

    if callback.data == '–ò–∑–º–µ–Ω–∏—Ç—å –¶–µ–Ω–∞ –°–ª–∞–≤–≥–æ—Ä–æ–¥':
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:')
        await FSMAdmin_Brod_change.Price_sl.set()

    if callback.data == '–ò–∑–º–µ–Ω–∏—Ç—å –§–æ—Ç–æ':
        await callback.message.answer(text='–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:')
        await FSMAdmin_Brod_change.Photo.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('–î–∞–ª—å—à–µ'))
async def change(callback: types.CallbackQuery):
    if callback.data == '–î–∞–ª—å—à–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
        await callback.message.answer(f'–í–µ—Å: ‚öñÔ∏è {BROD["heft"]}',
                                      reply_markup=keyboard.get_inline_keyboard_brod_change3('–≤–µ—Å'))

    if callback.data == '–î–∞–ª—å—à–µ –≤–µ—Å':
        await callback.message.answer(f'–¶–µ–Ω–∞ –Ø—Ä–æ–≤–æ–µ: {BROD["price_jr"]}',
                                      reply_markup=keyboard.get_inline_keyboard_brod_change3('–¶–µ–Ω–∞ –Ø—Ä–æ–≤–æ–µ'))

    if callback.data == '–î–∞–ª—å—à–µ –¶–µ–Ω–∞ –Ø—Ä–æ–≤–æ–µ':
        await callback.message.answer(f'–¶–µ–Ω–∞ –°–ª–∞–≤–≥–æ—Ä–æ–¥: {BROD["price_sl"]}',
                                      reply_markup=keyboard.get_inline_keyboard_brod_change3('–¶–µ–Ω–∞ –°–ª–∞–≤–≥–æ—Ä–æ–¥'))

    if callback.data == '–î–∞–ª—å—à–µ –¶–µ–Ω–∞ –°–ª–∞–≤–≥–æ—Ä–æ–¥':
        # await callback.message.answer(f'–§–æ—Ç–æ: \n'
        #                               f'{BROD["photo"]}',
        #                               reply_markup=keyboard.get_inline_keyboard_brod_change3('–§–æ—Ç–æ'))
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=BROD['photo'],
                             reply_markup=keyboard.get_inline_keyboard_brod_change3('–§–æ—Ç–æ'))


@dp.message_handler(state=FSMAdmin_Brod_change.Name)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        BROD['name'] = message.text

    # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º –ø—Ä–∞–π—Å —Ö–ª–µ–±–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    list_brod = bd.price_brod()

    await state.finish()

    await message.answer(f'–í–µ—Å: ‚öñÔ∏è{BROD["heft"]}‚öñÔ∏è',
                         reply_markup=keyboard.get_inline_keyboard_brod_change3('–≤–µ—Å'))

    # ü•ñ ü•êü•Øüçûü•®üå≠üçîü•™üç©üç™‚òéÔ∏èüí∏üõíüóëüíåüë§üì∑üìß‚úâÔ∏è


@dp.message_handler(state=FSMAdmin_Brod_change.Heft)
async def load_heft(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        BROD['heft'] = message.text

    # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º –ø—Ä–∞–π—Å —Ö–ª–µ–±–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    list_brod = bd.price_brod()

    await state.finish()

    await message.answer(f'–¶–µ–Ω–∞ –Ø—Ä–æ–≤–æ–µ: {BROD["price_jr"]}',
                         reply_markup=keyboard.get_inline_keyboard_brod_change3('–¶–µ–Ω–∞ –Ø—Ä–æ–≤–æ–µ'))


@dp.message_handler(state=FSMAdmin_Brod_change.Price_jr)
async def load_heft(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        BROD['price_jr'] = message.text

    # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º –ø—Ä–∞–π—Å —Ö–ª–µ–±–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    list_brod = bd.price_brod()

    await state.finish()

    await message.answer(f'–¶–µ–Ω–∞ –°–ª–∞–≤–≥–æ—Ä–æ–¥: {BROD["price_sl"]}',
                         reply_markup=keyboard.get_inline_keyboard_brod_change3('–¶–µ–Ω–∞ –°–ª–∞–≤–≥–æ—Ä–æ–¥'))


@dp.message_handler(state=FSMAdmin_Brod_change.Price_sl)
async def load_heft(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        BROD['price_sl'] = message.text

    # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º –ø—Ä–∞–π—Å —Ö–ª–µ–±–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    list_brod = bd.price_brod()

    await state.finish()

    await message.answer(f'–§–æ—Ç–æ: \n'
                         f'{BROD["photo"]}',
                         reply_markup=keyboard.get_inline_keyboard_brod_change3('–§–æ—Ç–æ'))
    await message.answer(text='–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"')


@dp.message_handler(lambda message: message.photo, content_types=['photo'], state=FSMAdmin_Brod_change.Photo)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        BROD['photo'] = message.photo[0].file_id

    # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º –ø—Ä–∞–π—Å —Ö–ª–µ–±–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    list_brod = bd.price_brod()

    await FSMAdmin_Brod_change.next()

    await bot.send_photo(chat_id=message.from_user.id,
                         photo=BROD['photo'],
                         caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {BROD["name"]}\n'
                                 f'–í–µ—Å: {BROD["heft"]}\n'
                                 f'–¶–µ–Ω–∞ –¥–ª—è –Ø—Ä–æ–≤–æ–≥–æ: {BROD["price_jr"]}\n'
                                 f'–¶–µ–Ω–∞ –¥–ª—è –°–ª–∞–≤–≥–æ—Ä–æ–¥–∞: {BROD["price_sl"]}\n')
    await message.answer(text='–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"')


@dp.message_handler(commands=['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'], state=FSMAdmin_Brod_change.Confirmation)
async def cmd_cancel(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        list_data_brod_change = [BROD["id"], BROD["name"], BROD["heft"], BROD["price_jr"], BROD["price_sl"],
                                 BROD["photo"]]

        # –∑–∞–ø–∏—à–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        result = bd.change_brod(list_data_brod_change)

    if result == True:
        await message.answer('–£—Å–ø–µ—à–Ω–æ!',
                             reply_markup=keyboard.kb_menu_admin())
        await state.finish()

    # –æ—á–∏—Å—Ç–∏–º —Å–ª–æ–≤–∞—Ä—å
    BROD.clear()



# –•–ª–µ–± - –£–î–ê–õ–ò–¢–¨
@dp.message_handler(Text(equals='–£–¥–∞–ª–∏—Ç—å - üóë'))
async def brod_add(message: types.Message):
    await FSMAdmin_Brod_del.ID.set()
    await message.answer('–°–ø–∏—Å–æ–∫ —Ö–ª–µ–±–∞:',
                         reply_markup=keyboard.get_cancel())
    # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º –ø—Ä–∞–π—Å —Ö–ª–µ–±–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    list_brod = bd.price_brod()
    # —Å–¥–µ–ª–∞–µ–º –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ö–ª–µ–±—É(id-–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
    list_str_brod = ''
    for id_and_name in list_brod:
        list_str_brod = f'{list_str_brod}\n' \
                        f'id: <em>{id_and_name[0]}</em> - –∏–º—è: <em>{id_and_name[1]}</em> '
    # –≤—ã–≤–µ–¥–µ–º –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è —Å–ø–∏—Å–æ–∫
    await message.answer(text=f'<b>–ü—Ä–∞–π—Å:</b>\n'
                              f'{list_str_brod}',
                         parse_mode="HTML")
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π id :',
                         reply_markup=keyboard.get_cancel())



# –ª–æ–≤–∏–º ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ö–ª–µ–±–∞
@dp.message_handler(state=FSMAdmin_Brod_del.ID)
async def load_id(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        BROD['id'] = int(message.text)
    await FSMAdmin_Brod_del.next()

    # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º –ø—Ä–∞–π—Å —Ö–ª–µ–±–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    list_brod = bd.price_brod()

    list_brod_del = []

    for data_brod in list_brod:
        if data_brod[0] == BROD['id']:
            for da in data_brod:
                list_brod_del.append(da)


    await message.reply(text=f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: {list_brod_del[1]}\n'
                             f'–Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" ')


@dp.message_handler(commands=['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'], state=FSMAdmin_Brod_del.Confirmation)
async def cmd_cancel(message: types.Message, state: FSMContext):
    # –∑–∞–π–¥–µ–º –≤ bd –∏ –≤—ã—Ç–∞—â–∏–º –ø—Ä–∞–π—Å —Ö–ª–µ–±–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    list_brod = bd.price_brod()

    list_brod_del = []

    for data_brod in list_brod:
        if data_brod[0] == BROD['id']:
            for da in data_brod:
                list_brod_del.append(da)

    # –£–¥–∞–ª–∏–º —Ö–ª–µ–± –∏–∑ bd –ø–æ id
    result = bd.del_brod(BROD['id'])
    if result == True:
        await message.answer(f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ü•®{list_brod_del[1]}\n'
                             f'–±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!',
                             reply_markup=keyboard.kb_menu_admin())

    await state.finish()

    # –æ—á–∏—Å—Ç–∏–º —Å–ª–æ–≤–∞—Ä—å
    BROD.clear()


# menu '<< –ù–∞–∑–∞–¥'
@dp.message_handler(Text(equals='<< –ù–∞–∑–∞–¥'))
async def admin_application(message: types.Message):
    await message.delete()
    await message.answer(text='–í—ã –∑–∞—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é',
                         reply_markup=keyboard.kb_menu_admin())


########################################################################################################################


########################################################################################################################


########################################################################################################################

# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–ê
########################################################################################################################
# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
@dp.message_handler(Text(equals='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'))
async def reg(message: types.Message):
    await message.delete()
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')


# —Ö–µ–Ω–¥–ª–µ—Ä –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ö–õ–ò–ï–ù–¢–ê –ª–æ–≤—è—â–∏–π –µ–≥–æ CliensID –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É –µ–≥–æ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
@dp.message_handler(Text(equals=range(1, 49)))
async def reg(message: types.Message):
    result_registration = bd.registration_clients(message.from_user.id, message.text)
    if result_registration:
        await message.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å\n'
                                  '—Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫–∏',
                             reply_markup=keyboard.kb_menu())


########################################################################################################################


# –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
########################################################################################################################
@dp.message_handler()
async def start_command(message: types.Message):
    # –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–∫–∞—á–∞–µ–º ID2 –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–ø–∏—Å–æ–∫
    id_clientse = bd.list_id2_clients()

    # –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ –æ—Ç–∫—Ä–æ–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if message.from_user.id not in id_clientse:
        await bot.send_message(chat_id=message.from_user.id,  # –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                               text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',  # –ø–∏—à–µ–º —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç
                               reply_markup=keyboard.kb_reg())  # –∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.delete()

    # –µ—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –æ—Ç–∫—Ä–æ–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
    elif message.from_user.id == ADMIN:
        print(message)
        await bot.send_message(chat_id=message.from_user.id,  # –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                               text='–ü—Ä–∏–≤–µ—Ç –ù–∞—Ç–∞—à–∞',  # –ø–∏—à–µ–º —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç
                               reply_markup=keyboard.kb_menu_admin())  # –∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.delete()

    # –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ –æ—Ç–∫—Ä–æ–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è
    else:
        await bot.send_message(chat_id=message.from_user.id,  # –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                               text=hi_text,  # –ø–∏—à–µ–º —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç
                               reply_markup=keyboard.kb_menu())  # –∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.delete()


########################################################################################################################


if __name__ == '__main__':
    # dp.middleware.setup(CustomMiddleware())
    executor.start_polling(skip_updates=True,  # –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                           dispatcher=dp,  # –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Å–ø–µ—Ç—á–µ—Ä
                           on_startup=on_startup)  # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
